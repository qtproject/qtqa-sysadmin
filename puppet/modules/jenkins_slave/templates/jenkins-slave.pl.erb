#!/usr/bin/env perl
#############################################################################
##
## Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
## Contact: http://www.qt-project.org/legal
##
## This file is part of the Qt Toolkit.
##
## $QT_BEGIN_LICENSE:LGPL$
## Commercial License Usage
## Licensees holding valid commercial Qt licenses may use this file in
## accordance with the commercial license agreement provided with the
## Software or, alternatively, in accordance with the terms contained in
## a written agreement between you and Digia.  For licensing terms and
## conditions see http://qt.digia.com/licensing.  For further information
## use the contact form at http://qt.digia.com/contact-us.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 2.1 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL included in the
## packaging of this file.  Please review the following information to
## ensure the GNU Lesser General Public License version 2.1 requirements
## will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
##
## In addition, as a special exception, Digia gives you certain additional
## rights.  These rights are described in the Digia Qt LGPL Exception
## version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU
## General Public License version 3.0 as published by the Free Software
## Foundation and appearing in the file LICENSE.GPL included in the
## packaging of this file.  Please review the following information to
## ensure the GNU General Public License version 3.0 requirements will be
## met: http://www.gnu.org/copyleft/gpl.html.
##
##
## $QT_END_LICENSE$
##
#############################################################################

use strict;
use warnings;

use FindBin;
use File::Spec::Functions;
use LWP::UserAgent;
use English qw( -no_match_vars );

# True iff Windows
my $WINDOWS = ($OSNAME =~ m{win32}i);

# Jenkins server URL
my $JENKINS_SERVER = '<%= jenkins_server %>';

# Working directory when Jenkins slave.jar is run
my $JENKINS_CWD = $FindBin::Bin;

# Name of this Jenkins slave
my $JENKINS_SLAVE_NAME = '<%= jenkins_slave_name %>';

# Remote slave.jar
my $JENKINS_SLAVE_JAR_URL = "$JENKINS_SERVER/jnlpJars/slave.jar";

# Local slave.jar
my $JENKINS_SLAVE_JAR = catfile( $JENKINS_CWD, 'slave.jar' );

sub fetch_slave_jar
{
    if (-e $JENKINS_SLAVE_JAR) {
        unlink( $JENKINS_SLAVE_JAR ) || die "unlink $JENKINS_SLAVE_JAR: $!";
    }

    my $ua = LWP::UserAgent->new( );
    my $response = $ua->get(
        $JENKINS_SLAVE_JAR_URL,
        ':content_file' => $JENKINS_SLAVE_JAR,
    );

    if (!$response->is_success( )) {
        die "fetch $JENKINS_SLAVE_JAR_URL: ".$response->decoded_content( );
    }

    return;
}

# Run slave.jar in a loop.
# Whenever it fails, it will be restarted (possibly with some delay).
# If it keeps failing for a long time, eventually we give up.
sub run_slave_jar
{
    my $jnlp_url = "$JENKINS_SERVER/computer/$JENKINS_SLAVE_NAME/slave-agent.jnlp";
    my @cmd = (
        'java',
        '-jar',
        $JENKINS_SLAVE_JAR,
        '-jnlpUrl',
        $jnlp_url,
    );

    my $INIT_ATTEMPTS = 100;    # how many times we'll try to run the slave
    my $INIT_SLEEP = 2;         # initial delay between attempts (seconds)
    my $MAX_SLEEP = 5 * 60;     # maximum delay between attempts (seconds)
    my $MIN_RUNTIME = 5 * 60;   # minimum expected runtime

    my $attempts = $INIT_ATTEMPTS;
    my $sleep = $INIT_SLEEP;

    while (1) {
        my $time = time();
        system( @cmd );

        warn "system( @cmd ): $? $!";

        # If Jenkins was able to run for at least this amount of time, we assume that the slave
        # was able to connect to the server and work somewhat correctly for a while, so we
        # don't have some catastrophic error (like network cable permanently unplugged).
        if (time() - $time > $MIN_RUNTIME) {
            warn "Resetting timeout and restarting Jenkins";
            $attempts = $INIT_ATTEMPTS;
            $sleep = $INIT_SLEEP;
            next;
        }

        # If Jenkins crashed quickly, keep retrying to restart it with a growing sleep between
        # each attempt, eventually giving up.
        if (--$attempts) {
            warn "Jenkins aborted rather quickly. Will try again in $sleep seconds; "
                ."$attempts attempts remaining";

            sleep( $sleep );

            $sleep *= 2;
            if ($sleep > $MAX_SLEEP) {
                $sleep = $MAX_SLEEP;
            }

            next;
        }

        die "Jenkins repeatedly aborted :(  Giving up after $INIT_ATTEMPTS attempts";
    }

    return;
}

# Calculates and returns an environment suitable for using java.
# Returns a hash suitable for assignment to %ENV
sub env_for_java
{
    my (%env) = %ENV;

    my $dev_null;
    if ($WINDOWS) {
        $dev_null = 'NUL';
    } else {
        $dev_null = '/dev/null';
    }

    my $cmd = "java -version > $dev_null 2>&1";

    # Is java already available/working ?
    if (system($cmd) == 0) {
        return %env;
    }

    warn "No working Java in PATH = $ENV{ PATH } .\n";

    # Use JAVA_HOME environment variable if possible...
    if (my $java_home = $env{ JAVA_HOME }) {
        my $sep = $WINDOWS ? ';' : ':';
        local $ENV{ PATH } = $ENV{ PATH } . $sep . catfile( $java_home, 'bin' );
        if (system($cmd) == 0) {
            warn "Found Java in JAVA_HOME = $java_home\n"
                ."Set PATH = $env{ PATH }\n";
            $env{ PATH } = $ENV{ PATH };
            return %env;
        }
        warn "No working Java in JAVA_HOME = $java_home\n";
    }

    warn "No working Java found anywhere. Will probably fail to run...\n";
    return %env;
}

sub run
{
    # This script runs an infinite loop.
    # This is the delay between run attempts.
    my $sleep = 60;

    print "Entering main loop...\n";
    while (1) {
        eval {
            chdir( $JENKINS_CWD ) || die "chdir $JENKINS_CWD: $!";

            local %ENV = env_for_java( );

            fetch_slave_jar( );
            run_slave_jar( );
        };

        if ($EVAL_ERROR) {
            warn "main loop error: $EVAL_ERROR\n";
        } else {
            warn "main loop unexpectedly completed\n";
        }

        warn "Restarting in $sleep seconds...\n";
        sleep( $sleep );
    }

    return;
}

run( ) unless caller;
1;
