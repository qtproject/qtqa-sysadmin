#!/usr/bin/env perl
#############################################################################
##
## Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
## Contact: http://www.qt-project.org/
##
## $QT_BEGIN_LICENSE:LGPL$
## GNU Lesser General Public License Usage
## This file may be used under the terms of the GNU Lesser General Public
## License version 2.1 as published by the Free Software Foundation and
## appearing in the file LICENSE.LGPL included in the packaging of this
## file. Please review the following information to ensure the GNU Lesser
## General Public License version 2.1 requirements will be met:
## http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
##
## In addition, as a special exception, Nokia gives you certain additional
## rights. These rights are described in the Nokia Qt LGPL Exception
## version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU General
## Public License version 3.0 as published by the Free Software Foundation
## and appearing in the file LICENSE.GPL included in the packaging of this
## file. Please review the following information to ensure the GNU General
## Public License version 3.0 requirements will be met:
## http://www.gnu.org/copyleft/gpl.html.
##
## Other Usage
## Alternatively, this file may be used in accordance with the terms and
## conditions contained in a signed written agreement between you and Nokia.
##
##
##
##
##
##
## $QT_END_LICENSE$
##
#############################################################################
use strict;
use warnings;

use FindBin;
use File::Spec::Functions;
use LWP::UserAgent;
use English qw( -no_match_vars );

# True iff Windows
my $WINDOWS = ($OSNAME =~ m{win32}i);

# Jenkins server URL
my $JENKINS_SERVER = '<%= jenkins_server %>';

# Working directory when Jenkins slave.jar is run
my $JENKINS_CWD = $FindBin::Bin;

# Name of this Jenkins slave
my $JENKINS_SLAVE_NAME = '<%= jenkins_slave_name %>';

# Remote slave.jar
my $JENKINS_SLAVE_JAR_URL = "$JENKINS_SERVER/jnlpJars/slave.jar";

# Local slave.jar
my $JENKINS_SLAVE_JAR = catfile( $JENKINS_CWD, 'slave.jar' );

# Log file of last jenkins run
my $JENKINS_LOG = catfile( $JENKINS_CWD, 'log.txt' );

sub fetch_slave_jar
{
    if (-e $JENKINS_SLAVE_JAR) {
        unlink( $JENKINS_SLAVE_JAR ) || die "unlink $JENKINS_SLAVE_JAR: $!";
    }

    my $ua = LWP::UserAgent->new( );
    my $response = $ua->get(
        $JENKINS_SLAVE_JAR_URL,
        ':content_file' => $JENKINS_SLAVE_JAR,
    );

    if (!$response->is_success( )) {
        die "fetch $JENKINS_SLAVE_JAR_URL: ".$response->decoded_content( );
    }

    return;
}

sub run_slave_jar
{
    my $jnlp_url = "$JENKINS_SERVER/computer/$JENKINS_SLAVE_NAME/slave-agent.jnlp";
    my @cmd = (
        'java',
        '-jar',
        $JENKINS_SLAVE_JAR,
        '-jnlpUrl',
        $jnlp_url,
    );

    if ($WINDOWS) {
        @cmd = ("@cmd >$JENKINS_LOG 2>&1");
    } else {
        @cmd = ("@cmd 2>&1 | tee $JENKINS_LOG | logger -t jenkins");
    }
    exec( @cmd );

    die "exec( @cmd ): $!";
}

sub run
{
    chdir( $JENKINS_CWD ) || die "chdir $JENKINS_CWD: $!";

    fetch_slave_jar( );
    run_slave_jar( );

    return;
}

run( ) unless caller;
1;
